#!/usr/bin/env python
from __future__ import print_function, unicode_literals

import sys
import os
import os.path
import json
import argparse
import platform
import subprocess

FILENAME = ".dkr"


class DockerException(Exception):
    pass


COLORS = {
    'HEADER': '\033[95m',
    'OKBLUE': '\033[94m',
    'OKGREEN': '\033[92m',
    'WARNING': '\033[93m',
    'FAIL': '\033[91m',
    'ENDC': '\033[0m',
}

def need_sudo(config_val):
    if not config_val:
        if platform.system == "Linux":
            return True
        return False
    else:
        return config_val


def warn_sudo(config_val):
    use_sudo = need_sudo(config_val)
    if config_val is None:
        if use_sudo:
            print("OS is Linux => {OKBLUE}Using{ENC} sudo to run docker".format(**COLORS))
        else:
            print("OS is {os} => {OKBLUE}Not using{ENDC} sudo to run docker".format(os=platform.system(), **COLORS))


def run_docker(cmdline, is_nv_docker=False, is_sudo=None, is_interactive=False):
    docker_executable = "nvidia-docker" if is_nv_docker else "docker"

    use_sudo = need_sudo(config_val=is_sudo)
    if use_sudo:
        docker_executable = "sudo " + docker_executable

    pargs = "{} {}".format(docker_executable, cmdline)

    try:
        if is_interactive:
            return subprocess.check_call(pargs, shell=True)

        out = subprocess.check_output(pargs, shell=True).decode().strip()
        print(out)
    except subprocess.CalledProcessError as ex:
        raise DockerException(ex.output)


def ensure_config():
    if not os.path.exists("./" + FILENAME):
        print("No config found. Please run 'dkr init ...'")
        sys.exit(1)


def read_config():
    with open("./" + FILENAME, "r") as f:
        return json.load(f)


def init(img, is_nv_docker, port, sudo_ns, docker_args):
    name = subprocess.check_output("pwd | md5sum -t | cut -c -32", shell=True).decode()

    sudo, nosudo = sudo_ns
    sudo_cfg = True if sudo else (False if nosudo else None)
    if sudo_cfg is None:
        print("sudo/nosudo flag not provided, will guess based on OS")

    cfg = {
        "image": img,
        "nvidia": is_nv_docker,
        "name": name.strip(),
        "port": port,
        "sudo": sudo_cfg,
        "docker_args": docker_args
    }

    with open("./" + FILENAME, "w") as f:
        json.dump(cfg, f)

    print("DONE")


def up():
    ensure_config()
    cfg = read_config()

    name = cfg['name']
    image = cfg['image']
    port = cfg['port']
    sudo = cfg.get("sudo", None)
    warn_sudo(sudo)

    docker_args = " ".join(cfg['docker_args'])

    print("Running {0}, port: {1}\n--\n".format(image, port))

    cmd_ps = "docker ps -a | grep -c {} || true".format(name)
    if need_sudo(config_val=sudo):
        cmd_ps = "sudo " + cmd_ps

    s = subprocess.check_output(cmd_ps, shell=True).strip()

    if int(s) == 0:
        ports = "-p {0}:{0}".format(port)
        proc = "bash"
        volume = "-v $(pwd):/vol"
        workdir = "-w /vol"
        cmdargs = "run {0} --name {1} -it {2} {3} {4} {5} {6}".format(
            ports, name, volume, docker_args, workdir, image, proc)

        r = run_docker(cmdargs, is_nv_docker=cfg['nvidia'], is_interactive=True, is_sudo=sudo)
        if r == 0:
            print("DONE")

    else:
        run_docker("start {}".format(name), is_nv_docker=cfg['nvidia'], is_sudo=sudo)
        attach()


def stop():
    ensure_config()
    cfg = read_config()
    name = cfg['name']
    sudo = cfg.get("sudo", None)
    warn_sudo(sudo)

    cmdargs = "stop {}".format(name)
    run_docker(cmdargs, is_nv_docker=cfg['nvidia'], is_sudo=sudo)


def attach():
    ensure_config()
    cfg = read_config()
    name = cfg['name']
    sudo = cfg.get("sudo", None)
    warn_sudo(sudo)

    cmdargs = "attach {}".format(name)
    run_docker(cmdargs, is_nv_docker=cfg['nvidia'], is_interactive=True, is_sudo=sudo)


def destroy():
    ensure_config()
    cfg = read_config()
    name = cfg['name']
    sudo = cfg.get("sudo", None)
    warn_sudo(sudo)

    cmdargs = "rm {}".format(name)
    run_docker(cmdargs, is_nv_docker=cfg['nvidia'], is_sudo=sudo)


def get_random_port():
    import random
    return 8000 + random.randint(1,999)


def main():
    if len(sys.argv) == 1 or sys.argv[1] == "--help":
        print("Usage: dkr up|stop|init|destroy")
        sys.exit(0)

    command = sys.argv[1]

    if command == 'up' or command == 'u':
        # handle case when docker was destroyed
        up()

    if command == 'stop' or command == 's':
        stop()

    if command == 'destroy' or command == 'd':
        destroy()

    if command == 'init' or command == 'i':
        if len(sys.argv) == 2 or sys.argv[2] == "--help":
            print(
                "Usage: dkr init image [--nvidia] [--sudo|nosudo] [--port PORT] [...docker args]")
            sys.exit(1)

        image = sys.argv[2]
        random_port = get_random_port()

        parser = argparse.ArgumentParser()
        parser.add_argument('--port', type=int, default=random_port)
        parser.add_argument('--nvidia', action='store_true')
        parser.add_argument('--sudo', action='store_true')
        parser.add_argument('--nosudo', action='store_true')
        args, unknown = parser.parse_known_args(sys.argv[3:])

        init(image, args.nvidia, args.port, (args.sudo, args.nosudo), docker_args=unknown)


if __name__ == "__main__":
    main()
